#!/usr/bin/env bash

#### array chars defination
chars=( 
        "0"
        "1" 
        "2" 
        "3" 
        "4"
        "5" 
        "6" 
        "7" 
        "8" 
        "9" 
        "a" 
        "b" 
        "c" 
        "d" 
        "e" 
        "f" 
        "g" 
        "h" 
        "i" 
        "j" 
        "k" 
        "l" 
        "m"
        "n"
        "o" 
        "p" 
        "q" 
        "r" 
        "s" 
        "t" 
        "u" 
        "v" 
        "w" 
        "x" 
        "y" 
        "z" 
        "A" 
        "B" 
        "C" 
        "D" 
        "E" 
        "F" 
        "G" 
        "H" 
        "I" 
        "J" 
        "K" 
        "L" 
        "M" 
        "N" 
        "O" 
        "P" 
        "Q" 
        "R" 
        "S" 
        "T" 
        "U" 
        "V" 
        "W" 
        "X" 
        "Y" 
        "Z" 
        "#" 
        "$" 
        "%" 
        "&" 
        "(" 
        ")" 
        "+" 
        "," 
        "-"
        "." 
        "/" 
        ":"
        ";"
        "<"
        "="
        ">"
        "?"
        "@"
        "[" 
        "]" 
        "^"
        "_"
        "{"
        "|"
        "}"
        "~" 
        # " "
        "\\"
        "*"
        "\""
	"\`"
        "!"
        "'"
)
# echo "${chars[@]}"; exit;


#### function defination
usage(){
   echo "usage: ./${0##*/} [-v] -f mapfile phrase"
   exit 1
} 

search() {
   local char="$1"  result=
   for ((i=1;i<=${#chars[@]};i++))
   do
	[ "${chars[$((${i}-1))]}" == "${char}" ] && {
		result="${i}" 
		break
	}
   done
   [ -z "${result}" ] && result="0"
   echo "${result}"
}

readdot(){
   local mapfile=$1  x=$2  y=$3  
   local x_sum=  y_sum=  f_x=  f_y=  dot=
   [ -z "${mapfile}" -o ! -f "${mapfile}" ] && {
	echo "you must specify an exist mapfile: ["${mapfile}"]"
	exit 1
   }
 
   [ -z "${x}" -o ! -z "${x//[0-9]}" -o -z "${y}" -o ! -z "${y//[0-9]}" ] && {
	echo "coordination (X.Y) must be integer: X:[${x}] Y:[${y}]"
	exit 1
   }
 
   echo "(X.Y): (${x}.${y})"

   y_sum=$(awk 'END{print NR}' "${mapfile}")
   x_sum=$(awk '(NR=='${y_sum}'){print NF}' "${mapfile}")
   echo y_sum: ${y_sum}  x_sum: ${x_sum}

   f_x=$(echo " ${x} % ${x_sum} " | bc 2>&-)
   f_y=$(echo " ${y} % ${y_sum} " | bc 2>&-)
   echo f_x: ${f_x}  f_y: ${f_y}

   dot=$(awk '(NR=='${f_y}'){print $'${f_x}'}' "${mapfile}")

   echo "${dot}"
}
# readdot ./map   1900 8967
# readdot ./map   1 1
# exit

#### Main Body Begin 

[ "$1" == "-v" -o "$1" == "-vv" ] && {
	verbose=1
	shift 1
}

[ "$#" != "3" ] && {
   usage
} || {
   [ "$1" != "-f" -o ! -f "$2" ] && {
   	usage
   } || {
   	phrase="$3"; 
   	[ -z "${phrase}" ] && {
		echo "phrase empty."
		usage
   	}
   }
}
[ "${verbose}" == "1" ] && echo "set phrase: ["${phrase}"]"

len=$(echo -en "${phrase}" | wc -c)
[ "${verbose}" == "1" ] && echo "phrase length: ["${len}"]"

array_numseq=
[ "${verbose}" == "1" ] && echo "begin to search char position:"
for ((m=1;m<=${len};m++))
do
	c=$(echo -e "${phrase}" | cut -c${m})
	num=$(search "${c}")
	[ "${verbose}" == "1" ] && echo "  -- search char: ["${c}"] position: ["${num}"]"

	if [ "${num}" == "0" ]; then
		echo "sorry: char [${c}] not supported."
		exit 2
	else
		array_numseq="${array_numseq} [${c}] [${num}]"
	fi
done
[ "${verbose}" == "1" ] && echo "final array_numseq: ${array_numseq[@]}"
