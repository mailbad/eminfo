#!/usr/bin/env bash
#
#
# This Script Responsible for Posting Data to HTTPSQS Server.
#
# Usage:     ./postlog -f {plugin_name} -s {jobid} -i "${plugin_output_stuff}" 
#
# Example:   ./postlog -f check_sysload -s AlFt5885 -i "{crit}:{str}:{System Load Check CRITICAL | Load [13.8] >= UpLimit: [10]}"
#



#
# Script Configs Begin
#

# httpsqs server address
# post_server="127.0.0.1"
post_server=""

# httpsqs server port
# post_server_port="1218"
post_server_port=""

# httpsqs queue name
# queue_name="content"
queue_name=""

# auth password
# auth_pass="1q2w3e"
auth_pass=""

# content charset
charset="utf-8"

# timeout to connect httpsqs server
post_time_out="10"


#
# Script Configs End
#



[ -z "${BASE_DIR}" ] && {
        path=$(cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
        source ${BASE_DIR}/bin/include 2>&-
}


# def help
show_usage(){
  echo "Usage:   ./${0##*/} -f {plugin_name} -s {jobid} -i \"{plugin_output_stuff}\"  "
  echo "Example: ./${0##*/} -f check_sysload -s AlFt5885 -i \"{crit}:{str}:{System Load Check CRITICAL | Load [13.8] >= UpLimit: [10]}\""
  exit 1
}

# read args
while getopts f:s:i:  opt
do
        case ${opt} in
        "f")
                plugin_name="${OPTARG}"   ;;
        "s")
                jobid="${OPTARG}"         ;;
	"i")
		# LANG=C
		content="${OPTARG}"	  ;;
        esac
done

# set default
[ -z "${plugin_name}" ] && plugin_name="FNULL"
[ -z "${jobid}" ] && jobid="00000000"
[ -z "${content}" ] && show_usage
from="${plugin_name}.${jobid}"


# main begin 
write_log -f ${POSTLOG_LOG} ""
write_log -f ${POSTLOG_LOG} "[${from}]" "INFO: begin to postLog"

[ "${plugin_name}" == "FNULL" -o "${jobid}" == "00000000" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: missing arguments [-f/-s], maybe script running from command line."
}

[ -z "${charset//[ ]}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: charset empty, set default charset=[utf-8]"
	charset="utf-8"
}

[ -z "${post_time_out//[ ]}" -o ! -z "${post_time_out//[0-9]}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: invalid post timeout [$post_time_out], set post_time_out=[10]"
	post_time_out="10"
}

[ -z "${post_server_port//[ ]}" -o ! -z "${post_server_port//[0-9]}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"WARN: invalid post_port [${post_server_port}], set post_server_port=[1218]"
	post_server_port="1218"
}

[ -z "${post_server//[ ]}" -o -z "${queue_name//[ ]}" -o -z "${auth_pass//[ ]}" ] && {
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"ERROR: configurations not complete:"\
		"[post_server,queue_name,auth_pass can't be empty]. EXIT"
  	exit 1
}
write_log -f ${POSTLOG_LOG} "[${from}]"\
	"INFO: set post_server=[${post_server}], queue_name=[${queue_name}], auth_pass=[${auth_pass}]"

postdata=$(conv_output2postdata "${content}")
s_n=$(echo "${postdata}" | awk -v RS="${SPLIT}" 'END{print --NR}')
if [ "$s_n" != "3" ]; then
  	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"ERROR: invalid input data: [${content}] -> [${postdata}]. EXIT"
  	exit 1
else
	postdata=$( echo -n "${postdata}" | od -t x1 -A n -w1000 | tr " " "%" )
	write_log -f ${POSTLOG_LOG} "[${from}]"\
		"INFO: form-encode input data finished."
fi

write_log -f ${POSTLOG_LOG} "[${from}]"\
	"INFO: posting data: [${content}] -> [${postdata}]"

# curl -s: silient
result=$( /usr/bin/curl -s --connect-timeout ${post_time_out} -d "${postdata}" "http://${post_server}:${post_server_port}/?charset=${charset}&name=${queue_name}&opt=put&auth=${auth_pass}"  2>&1 )
if [ "$?" == "0" ]; then
	result="SUCCESS: ${result}"
else
	if [ -z "${result}" ]; then
		result="FAIL: return nothing, maybe timeout on connect [$post_server:$post_server_port]"
	else
		result="FAIL: ${result}"
	fi
fi

write_log -f ${POSTLOG_LOG} "[${from}]" "INFO: end to postLog. result "${result}""
write_log -f ${POSTLOG_LOG} ""
write_log -f ${POSTLOG_LOG} ""
