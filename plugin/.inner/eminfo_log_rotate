#!/usr/bin/env bash

#
# Inner Plugin:  periodic rollback logfiles.
#

if [ -z "${BASE_DIR}" ]; then
	path=$(cd $(dirname $0) && pwd)  
	BASE_DIR=${path%/*}
	BASE_DIR=${BASE_DIR%/*}
	source ${BASE_DIR}/bin/include 2>&-
fi



# Read plugin config value here
force_size_uplimit=$( read_eminfo_config eminfo_log_rotate force_size_uplimit )

# if null or invalid set default.
[ -z "${force_size_uplimit}" -o ! -z "${force_size_uplimit//[0-9]}" ] && force_size_uplimit=1024

# check function here
check() {
  local result=
  array_logfiles=( 
		${EMINFO_LOG} 
		${INNER_LOG} 
		${PRECHECK_LOG} 
		${POSTLOG_LOG} 
		${TAKESNAP_LOG} 
		${UPDATE_LOG} 
		${SENDMAIL_LOG} 
		"${LOG_DIR}/sync_user524.log"
		"${LOG_DIR}/sync_userfail.log"
		"${LOG_DIR}/cancle_migrate.log"
		)

  for file in  ${array_logfiles[@]}
  do
	[ -f "${file}" ] && {

		## 1. check filesize
		local size=$( du -sm "${file}" 2>&- | awk '{print $1}' )
		[ -z "${size}"  -o ! -z "${size//[0-9]}" ] || {
			[ "$( echo "${size} >= ${force_size_uplimit}" | bc )" == "1" ] &&  {
				local basefile="${BACK_DIR}/${file##*/}.$(date +%F).${size}M"
				local dstfile="${basefile}"
				local seqnum=0
				while [ -f "${dstfile}" ]
				do
					((seqnum++))
					dstfile="${basefile}_${seqnum}"
				done

		    		mv  "${file}" "${dstfile}" 2>&-
		    		result="${result} [${file}] filesize:[${size}M >= ${force_size_uplimit}M]: roll back [${file}] => [${dstfile}];"
		    		continue
			}
		}

		## 2. check current time : the begining of newday or not
		local day_start=$(date -d "" +%s)     ### the begining of today
		local time_long=$( conv_time2sec "$(get_frequency eminfo_log_rotate)" )    ### timelong of this plugin
		local end_time=$(( ${day_start} + ${time_long} ))
		local now_time=$(date +%s)		### nower time
		[ "$(echo "${now_time} < ${end_time}" | bc 2>&-)" == "1" ] && {
			local basefile="${BACK_DIR}/${file##*/}.$(date -d "-1day" +%F)"
			local dstfile="${basefile}"
			local seqnum=0
			while [ -f "${dstfile}" ]
			do
				((seqnum++))
				dstfile="${basefile}_${seqnum}"
			done	
			
			mv "${file}" "${dstfile}" 2>&-
			result="${result} [${file}] newday begin:[$(date +%F_%T)]: roll back [${file}] => [${dstfile}];"
			continue
		}

		## 3. check head and tail logitem is the same day or not?
		local head_ts=$( head -n1 "${file}" | awk '{print $1}' )
		local tail_ts=$( tail -n1 "${file}" | awk '{print $1}' )
		[ -z "${head_ts}" -o ! -z "${head_ts//[0-9]}" -o -z "${tail_ts}" -o ! -z "${tail_ts//[0-9]}" ] || {
			head_day=$( date -d "1970-01-01 UTC ${head_ts} seconds" +%F)
			tail_day=$( date -d "1970-01-01 UTC ${tail_ts} seconds" +%F)
			[ "${head_day}" != "${tail_day}" ] && {
				local basefile="${BACK_DIR}/${file##*/}.${head_day}"
				local dstfile="${basefile}"
				local seqnum=0
				while [ -f "${dstfile}" ]
				do
					((seqnum++))
					dstfile="${basefile}_${seqnum}"
				done

			    	mv "${file}" "${dstfile}" 2>&-
			    	result="${result} [${file}] newday logitem:[${tail_day} <> ${head_day}]: roll back [${file}] => [${dstfile}];"
			    	continue
			}
		}

		## 4. check head logitem is today or not ?
		local head_ts=$( head -n1 "${file}" | awk '{print $1}' )
		[ -z "${head_ts}" -o ! -z "${head_ts//[0-9]}" ] || {
			head_day=$( date -d "1970-01-01 UTC ${head_ts} seconds" +%F)
			today=$(date +%F)
			[ "${head_day}" != "${today}" ] && {
				local basefile="${BACK_DIR}/${file##*/}.${head_day}"
				local dstfile="${basefile}"
				local seqnum=0
				while [ -f "${dstfile}" ]
				do
					((seqnum++))
					dstfile="${basefile}_${seqnum}"
				done
	
				mv "${file}" "${dstfile}" 2>&-
				result="${result} [${file}] [ headday: ${head_day} <> today: ${today}]: roll back [${file}] => [${dstfile}];"
				continue
			}
		}
	}
  done
  
  [ -z "${result//[ ]}" ] && result="Nothing to do"
  echo "${result}"
}

check
