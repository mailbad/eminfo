#!/usr/bin/env bash

#
# Inner Plugin:  periodic clear tmpfiles logfiles snapfiles.
#

if [ -z "${BASE_DIR}" ]; then
	path=$(cd $(dirname $0) && pwd)  
	BASE_DIR=${path%/*}
	BASE_DIR=${BASE_DIR%/*}
	source ${BASE_DIR}/bin/include 2>&-
fi



# Read plugin config value here
tmpfile_reserve_time=$( read_eminfo_config eminfo_clear_overdue tmpfile_reserve_time)
logfile_reserve_time=$( read_eminfo_config eminfo_clear_overdue logfile_reserve_time)
snapfile_reserve_time=$( read_eminfo_config eminfo_clear_overdue snapfile_reserve_time )

# if null or invalid set default.
[ -z "${tmpfile_reserve_time}" -o ! -z "${tmpfile_reserve_time//[0-9]}" ] && tmpfile_reserve_time=15
[ -z "${logfile_reserve_time}" -o ! -z "${logfile_reserve_time//[0-9]}" ] && logfile_reserve_time=90
[ -z "${snapfile_reserve_time}" -o ! -z "${snapfile_reserve_time//[0-9]}" ] && snapfile_reserve_time=30


# check function here
check() {
  local result= dellist= tmpfile_dirlist= tmpfiles= logfiles= snapfiles=
  local total_num=0  t_num=0  l_num=0  s_num=0

  # First check if the top directories which to be searched is invalid or not.
  # You must take care here becase it releated to deletion operations.
  # If one of the following three variables is invalid, exit.
  [ "$( sub_str "${TMP_DIR}" "eminfo/tmp" )" == "no" ] && {
	result="Critical Error: TMP_DIR [${TMP_DIR}] is invalid"
	echo "${result}"
	return 1
  }
  [ "$( sub_str "${BACK_DIR}" "eminfo/log/backup" )" == "no" ] && {
	result="Critical Error: BACK_DIR [${BACK_DIR}] is invalid"
	echo "${result}"
	return 1
  }
  [ "$( sub_str "${SNAPSHOT_DIR}" "eminfo/log/snapshot" )" == "no" ] && {
	result="Critical Error: SNAPSHOT_DIR [${SNAPSHOT_DIR}] is invalid"
	echo "${result}"
	return 1
  }

  # 1. search tmpfiles

  # set tmp dirlist.
  for plugin_name in `list_plugin_section`
  do
	[ -d "${TMP_DIR}/${plugin_name}" ] && {
		tmpfile_dirlist="${tmpfile_dirlist} ${TMP_DIR}/${plugin_name}"
	}
  done
  [ -d "${TMP_DIR}/mailbody" ] && tmpfile_dirlist="${tmpfile_dirlist} ${TMP_DIR}/mailbody"

  # search tmpfiles in tmpdirs.
  [ -z "${tmpfile_dirlist//[ ]/}" ] && {
	result="${result} tmpfile: No temperary directories be searched;" 
  } || {
	tmpfiles=$( find ${tmpfile_dirlist} -follow -type f -ctime +${tmpfile_reserve_time} -print 2>&- )
	[ -z "${tmpfiles}" ] && {
		t_num=0
	} || {
		t_num=$(echo -e "${tmpfiles}" | wc -l)
	}
	dellist="${dellist} ${tmpfiles} \n"   ### \n here is important
  	result="${result} tmpfile: ${t_num} files;"
  }

  # 2. search logfiles
  logfiles=$( find ${BACK_DIR} -follow -type f -ctime +${logfile_reserve_time} -print 2>&- )
  [ -z "${logfiles}" ] && {
	l_num=0
  } || {
  	l_num=$(echo -e "${logfiles}" | wc -l)
  }
  dellist="${dellist} ${logfiles} \n"   ### \n here is important
  result="${result} logfile: ${l_num} files;"

  # 3. search snapfiles
  snapfiles=$( find ${SNAPSHOT_DIR} -follow -type f -ctime +${snapfile_reserve_time} -print 2>&- )
  [ -z "${snapfiles}" ] && {
	s_num=0
  } || {
  	s_num=$(echo -e "${snapfiles}" | wc -l)
  }
  dellist="${dellist} ${snapfiles} \n"   ### \n here is important
  result="${result} snapfiles: ${s_num} files;"

  total_num=$(( ${t_num} + ${l_num} + ${s_num} ))
  [ "${total_num}" == "0" ] && {
	result="Nothing to do" 
  } || {
	result="${result} total: ${total_num} files to be cleaned up: $( echo -e "${dellist}" | tr '\n' ' ' ) ."
  }

  # 4. delete files
  # for line in `echo -e "${dellist}"`     ### can't deal filename with space.
  echo -e "${dellist}" | while read line
  do
	[ ! -z "${line//[ ]}" -a -f "${line}" ] && rm -f "${line}" 2>&-
  done

  echo "${result}"
}

check
