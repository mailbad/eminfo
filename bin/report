#!/bin/bash
#
#
# This Script Responsible for Report Plugin's Running Status.
# 
# Usage:     ./report {plugin_name}
# 	     ./report all
#	     ./report -f {plugin_name} -i {plugin_output_stuff}
#
# Example:   ./report check_sysload
# Example:   ./report all
# Example:   ./report -f check_sysload -i "{crit}:{str}:{System Load Check CRITICAL | Load [13.8] >= UpLimit: [10] | line1 ### line2 ### <font color=red> line3 </font> ### }"
#


BASE_DIR="/usr/local/eminfo"
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi



### Function Def

show_usage(){
  echo "Usage:   ./${0##*/} {plugin_name}"
  echo "Usage:   ./${0##*/} -f {plugin_name} -i \"{plugin_output_stuff}\""
  echo "Example: ./${0##*/} check_sysload"
  echo "Example: ./${0##*/} all"
  echo "Example: ./${0##*/} -f check_sysload -i \"{crit}:{str}:{System Load Check CRITICAL | Load [13.8] >= UpLimit: [10] | line1 ### line2 ### <font color=red> line3 </font> ### } \""
  exit 1
}

print_record(){
  local pname=${1} ts= result= line= level= type= title= summary= body= content=
  local aline="=========="
  local output=

  if [ "${MODE}" == "0" ]; then   ## read from stat file.
  	if [ -f "${TMP_STATUS}" -a -s "${TMP_STATUS}" ]; then
		line=$(awk '(/^'${pname}'\> /){print;exit;}' "${TMP_STATUS}" 2>&-)
  	else
		echo_yellow "Status File NOT Exist or Empty" ; echo
		return 1
  	fi
  elif [ "${MODE}" == "1" ]; then  ## read from command args.
	shift; line="$*"		
  fi

  if [ -z "${line}" ]; then
	ts="-"
	result="No Record, Maybe Plugin Never been Running or Plugin Return Nothing"
	output="\nPlugin   : ${pname}"\
"\nTime     : ${ts}"\
"\nResult   :"\
"\n${result}"\
"\n"
  	echo -e "\n${output}\n${aline}\n"
	return 1
  else
	if [ "${MODE}" == "0" ]; then    ### read from status file, no need to check misforma.
		ts=$(echo -e "${line}" | awk '{print $2}')
		ts=$(date -d "1970-01-01 UTC ${ts} seconds" +%F_%T 2>&-)
		result=$(echo -e "${line}" | awk '{$1=$2="";print;exit;}')  
	elif [ "${MODE}" == "1" ]; then  ### read from args, need to check various misforma here.
		ts=$(date +%F_%T)
		result="${line}"
		## check line number
		if [ "$(echo -en "${result}"|awk 'END{print NR}')" != "1" ]; then
			result="Misforma, Plugin Output More Than One Line"
			output="\nPlugin   : ${pname}"\
"\nTime     : ${ts}"\
"\nResult   :"\
"\n${result}"\
"\n"
			echo -e "\n${output}\n${aline}\n"
			return 1
		## check output format
		elif [ -z "$(${PLUTIL} "part_pstr_output" "3" "${result}" 2>&-)" ]; then
			result="Misforma, Plugin Output Format Unrecognized"
			output="\nPlugin   : ${pname}"\
"\nTime     : ${ts}"\
"\nResult   :"\
"\n${result}"\
"\n"
			echo -e "\n${output}\n${aline}\n"
			return 1
		fi
	fi

	level=$(${PLUTIL} part_pstr_output 1 "${result}"|tr '[a-z]' '[A-Z]')
	type=$(${PLUTIL} part_pstr_output 2 "${result}"|tr '[A-Z]' '[a-z]')
	case "${type}" in 
	"str")
		title=$(${PLUTIL} part_pstr_output 4 "${result}")
		[ -z "${title}" ] || title="Title    : ${title}"
		summary=$(${PLUTIL} part_pstr_output 5 "${result}"|sed -e 's/^[ \t]//')
		[ -z "${summary}" ] || summary="Summary  : ${summary}"
		body=$(${PLUTIL} part_pstr_output 6 "${result}"|sed -e 's/^[ \t]//')
		body=$( ${PLUTIL} format_pstr_output_toterm "${body}")
		[ -z "${body}" ] || body="Details  :\n${body}"
		content="${title}\n${summary}\n${body}\n"
		output="\nPlugin   : ${pname}"\
"\nTime     : ${ts}"\
"\nResult   :"\
"\nLevel    : ${level}"\
"\nType     : Strings"\
"\n${content}\n"
		;;
	"file")
		files=$(${PLUTIL} part_pstr_output 3 "${result}")
		output="\nPlugin   : ${pname}"\
"\nTime     : ${ts}"\
"\nResult   :"\
"\nLevel    : ${level}"\
"\nType     : Files"\
"\nFiles    : ${files}"\
"\n"
		;;
	*)
		result="Misforma, Plugin Output Type Unrecognized, Only [file|str] Accepted"
		output="\nPlugin   : ${pname}"\
"\nTime     : ${ts}"\
"\nResult   :"\
"\n${result}"\
"\n"
		;;
	esac
  fi

  echo -e "\n${output}\n${aline}\n"
  return 0
}



### Main Body Begin ...

MODE=0
while getopts f:i: opt
do
        case ${opt} in
        "f")
                plugin_name="${OPTARG}"   ;;  
        "i")
                content="${OPTARG}"       ;;  
	*)
		show_usage		  ;;
        esac
done
[ ! -z "${plugin_name}" -o ! -z "${content}" ] && MODE=1

if [ "${MODE}" == "0" ]; then
	plugin_name="${1}"
	[ -z "${plugin_name}" ] && show_usage
	if [ "${plugin_name}" == "all" ]; then
		for p in `list_plugin_section` # `list_inner_plugin_section`
  		do
			print_record "${p}"
  		done
	else
  		print_record "${plugin_name}"
	fi
fi

if [ "${MODE}" == "1" ]; then 
	print_record "${plugin_name}" "${content}"
fi
