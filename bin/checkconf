#!/usr/bin/env bash
#
#
# This Script Responsible for Check Config File: conf/eminfo.ini
# 
# Usage:     ./checkconf
#
# Example:   ./takesnap
#
# Return Code:  0|1|2|3   ==>  (OK|WARN|CRIT|UNKN)
#


[ -z ${BASE_DIR} ]  && {
        path=$( cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
        source ${BASE_DIR}/bin/include 2>&-
}


# echo "${ARRAY_BASE_CONFIG[*]}"


# Set Return Codes
STATE_OK=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNKN=3

# Set VERBOSE
VERBOSE=0
[ "$1" == "-v" -o "$1" == "verbose" ] && VERBOSE=1

# Show Help
[ "$1" == "-h" -o "$1" == "help" -o "$1" == "?" -o "$1" == "/?" ] && {
cat << EOF
	./${0##*/}
	./${0##*/} -v | verbose
	./${0##*/} -h | help
EOF
exit 0
}

# Check Rules Definations:
#
# Rule Format: 
# 	str:default strings if null
# 	emls:default emls if null
# 	int:min:max
# 	set:[value1|value2|value3]
# 	cbset:[value1|value2|value3]
# 	file:search dirname under basedir eminfo/
# 	time
#
ARRAY_CONFIG_RULES=(
	"global=>name" 				"str:Linux Server"
	"global=>scan_interval"  		"int:5:999"
	"global=>attach_ini_mail"		"set:[yes|no]"
	"global=>sysload_uplimit"		"int:0:999"

	"plugin_default=>enable"		"set:[yes|no]"
	"plugin_default=>comment"		"str:Eminfo Plugin"
	"plugin_default=>frequency"		"time"
	"plugin_default=>exec_tmout"		"time"
	"plugin_default=>maxerr_times"		"int:1:999"
	"plugin_default=>take_snapshot_type"	"cbset:[crit|warn|unkn|succ|tmout|all|none|default]"
	"plugin_default=>mail_notify_type"	"cbset:[crit|warn|unkn|succ|tmout|all|none|default]"
	"plugin_default=>post_notify_type"	"cbset:[crit|warn|unkn|succ|tmout|all|none|default]"
	"plugin_default=>mail_receviers"	"file or emls:root_bbk@126.com"
	"plugin_default=>attach_snap_mail"	"set:[yes|no]"
	"plugin_default=>auto_handle_type"	"cbset:[crit|warn|unkn|succ|tmout|all|none|default]"
	"plugin_default=>auto_handler"		"file:handler"
	"plugin_default=>debug"			"set:[yes|no]"

	"eminfo_clear_overdue=>tmpfile_reserve_time"  "int:1:999"
	"eminfo_clear_overdue=>logfile_reserve_time"  "int:1:999"
	"eminfo_clear_overdue=>snapfile_reserve_time" "int:1:999"

	"eminfo_log_rotate=>force_size_uplimit"	      "int:1:2047"

	#"check_sysload=>uplimit"		"int:0:999"

	#"check_cpu_usage=>uplimit"		"int:0:100"

	#"check_iowait=>uplimit"			"int:0:100"

	#"check_disk_freespace=>disk_spare_space_uplimit"	"int:0:99999999"
	#"check_disk_freespace=>disk_spare_percent_uplimit"	"int:0:100"
	#"check_disk_freespace=>inode_spare_percent_uplimit"	"int:0:100"

	#"check_process=>pslist_file"		"file"

	#"check_pop_svr=>time_out"		"int:0:99"

	#"check_smtp_svr=>time_out"		"int:0:99"

	#"remote_mail_test=>sample_email_file"	"file"
	#"remote_mail_test=>mail_body_file"	"file"
	#"remote_mail_test=>helo_greeting_fqdn"	"str:eyou.net"
	
	#"notify_syslogin=>allow_iplist"		"file"
)


#
# Function Definations
#

# check type {str}
# Example:	check_type_str "str:Eminfo Plugin" "  "; echo $?
#
check_type_str(){
  local rule="$1"; shift 1; local input="$*"
  local default=$(echo -e "${rule}"|awk -F":" '{$1="";print;exit;}')
  local result=  rc=
  [ -z "${input//[ ]}" ] && {
	result="NULL, set default [${default}]"
	rc=${STATE_WARN}
  } || {
	result="OK, [${input}]"
	rc=${STATE_OK}
  }
  echo -e "${result}"
  return "${rc}"
}

# check type {emls}
# Example:	check_type_emls emls "zhangguangzheng@eyou.net" "hello@@@1" "fjdkfjdkfj@kkk.1"; echo $?
#
check_type_emls(){
  local rule=$1; shift 1; local input="$*"
  local default=$(echo -e "${rule}"|awk -F":" '{$1="";print;exit;}')
  local result=  rc=
  [ -z "${input//[ ]}" ] && {
        result="NULL, set default [${default}]"
        rc=${STATE_WARN}
  } || {
	local oknum=0 errnum=0 total=0
	for eml in `echo -e "${input}"`
	do
		if [ "${eml}" == "$(echo -e "${eml}" | grep -E -o "\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*")" ]; then
			result="${result} [${eml}] valid email address;"
			((oknum++))
		else
			result="${result} [${eml}] invalid email address;"
			((errnum++))
		fi
		((total++))
	done
	[ "${errnum}" != "0" ] && {
		result="CRIT, [${errnum}/${total}] invalid email address. ${result}"
		rc=${STATE_CRIT}
	} || {
		result="OK, [${oknum}/${total}] valid email address. ${result}"
		rc=${STATE_OK}
	}
  }
  echo -e "${result}"
  return "${rc}"
}


# check type {int}
# Example:	check_type_int "int:3:9" "10"; echo $?
#
check_type_int(){
  local rule="$1"; shift 1; local input="$*"
  local min=$(echo -e "${rule}"|awk -F":" '{print $2}'|tr -d ' ')
  local max=$(echo -e "${rule}"|awk -F":" '{print $3}'|tr -d ' ')
  local result=  rc=

  [ -z "${min}" -o ! -z "${min//[0-9]}" -o -z "${max}" -o ! -z "${max//[0-9]}" ] && {
	echo "CRIT, rule=[${rule}], min=[${min}] or max=[${max}] is not numberic"
	return ${STATE_CRIT}
  }

  [ -z "${input//[ ]}" ] && {
	result="NULL"
	rc=${STATE_CRIT}
  } || {
	[ ! -z "${input//[0-9]}" ] && {
		result="CRIT, must be number"
		rc=${STATE_CRIT}
	} || {
		[ "$(echo "${input}>=${min}" | bc 2>&-)" == "1" -a "$(echo "${input}<=${max}" | bc 2>&1)" == "1" ] && {
			result="OK, number and between [${min}-${max}]"
			rc=${STATE_OK}
		} || {
			result="CRIT, must between [${min}-${max}]"
			rc=${STATE_CRIT}
		}
	}
  }

  echo -e "${result}"
  return "${rc}"
}

# check type {set}
# Example:	check_type_set "set:[ok|no]"  "yes"; echo $?
# 
check_type_set(){
  local rule="$1"; shift 1; local input="$*"
  local sets=$(echo -e "${rule}"|awk -F":" '{$1="";print;exit;}'  | tr '|' ' ' | tr -d '[]')
  local result=  rc=
  [ -z "${input//[ ]}" ] && {
        result="NULL"
        rc=${STATE_CRIT}
  } || {
  	for s in `echo -e "${sets}"`
  	do
		[ "${s}" == "${input}" ] && {
			result="OK, [${input}] belongs in [${sets}]"
			rc=${STATE_OK}
			break
		}
  	done
	[ -z "${result}" ] && {
		result="CRIT, [${input}] not belongs in [${sets}]"
		rc=${STATE_CRIT}
	}
  }
  echo -e "${result}"
  return "${rc}"
}

# check type {cbset}
# Example:	check_type_cbset "cbset:[crit|warn|unkn|succ|tmout|all|none|default]" "none default fuck name"; echo $?
# 
check_type_cbset(){
  local rule="$1"; shift 1; local input="$*"
  local sets=$(echo -e "${rule}"|awk -F":" '{$1="";print;exit;}'  | tr '|' ' ' | tr -d '[]')
  local result=  rc=
  [ -z "${input//[ ]}" ] && {
        result="NULL"
        rc=${STATE_CRIT}
  } || {
	local errnum=0  oknum=0  total=0
	for i in `echo -e "${input}"`
	do
		local tag=0
		for s in `echo -e "${sets}"`
		do
			[ "${s}" == "${i}" ] && {
				tag=1
				break
			}
		done
		[ "${tag}" == "0" ] && {
			((errnum++))
			result="${result} [${i}] invalid,"
		} || {
			((oknum++))
			result="${result} [${i}] all right,"
		}
		((total++))
	done
	[ "${errnum}" != "0" ] && {
		result="CRIT, [${errnum}/${total}] invalid, allowed: [${sets}], ${result}"
		rc=${STATE_CRIT}
	} || {
		result="OK, [${oknum}/${total}] all right, ${result}"
		rc=${STATE_OK}
	}
  }
  echo -e "${result}"
  return "${rc}"
}

# check type file {file}
# Example:	check_type_file "file:log/"  " abc file:b file:c d e /etc/inittab eminfo.log"; echo $?
# 
check_type_file(){
  local rule="$1"; shift 1; local input="$*"
  local sdir="$(echo -e "${rule}"|awk -F":" '{print $2;exit;}')"
  local filelst="$(echo -e "${input}" | sed -e 's/file://g;')"
  local result=  rc=
  [ -z "${input//[ ]}" ] && {
        result="NULL"
        rc=${STATE_CRIT}
  } || {
	local errnum=0 oknum=0 total=0
	for file in `echo -e "${filelst}"`
	do
		if [ -f "/${file}" -a -s "/${file}" ]; then
			((oknum++))
			result="${result} file [${file}] exists;"
		elif [ -f "${BASE_DIR}/${file}" -a -s "${BASE_DIR}/${file}" ]; then
			((oknum++))
			result="${result} file [${file}] exists;"
		elif [ -f "${BASE_DIR}/${sdir}/${file}" -a -s "${BASE_DIR}/${sdir}/${file}" ]; then
			((oknum++))
			result="${result} file [${sdir}/${file}] exists;"
		else
			((errnum++))
			result="${result} file [${file}] not exists or empty;"
		fi
		((total++))
	done
	[ "${errnum}" != "0" ] && {
                result="CRIT, [${errnum}/${total}] failed, ${result}"
                rc=${STATE_CRIT}
        } || {
                result="OK, [${oknum}/${total}] all right, ${result}"
                rc=${STATE_OK}
        }
  }
  echo -e "${result}"
  return "${rc}"
}

# check type {time}
# Example:	check_type_time time "10year10min"; echo $?
#
check_type_time(){
  local rule=$1; shift 1; local input="$*"
  local result=  rc=
  [ -z "${input//[ ]}" ] && {
        result="NULL"
        rc=${STATE_CRIT}
  } || {
	local seconds=$( conv_time2sec "${input}" )
	[ "${seconds}" == "invalid" ] && {
		result="CRIT, time format invalid: [${input}]"
		rc=${STATE_CRIT}
	} || {
		result="OK, time format all right: [${input}]=[${seconds}]s"
		rc=${STATE_OK}
	}
  }
  echo -e "${result}"
  return "${rc}"
}

# check multi type [rules include keyword "or"]
# Example:	check_ortypes file str:root_bbk@126.com  ""; echo $?
# 
check_ortypes(){
  local rule1="$1" rule2="$2"; shift 2; local input="$*"
  local result=  rc=
  local type1="$(echo -e "${rule1}"|awk -F":" '{print $1}')"
  local type2="$(echo -e "${rule2}"|awk -F":" '{print $1}')"
  local retr1= retr2= rc1= rc2=
  retr1=$( eval "check_type_${type1}  \"${rule1}\" \"${input}\" " 2>&1 )
  rc1=$?
  retr2=$( eval "check_type_${type2} \"${rule2}\" \"${input}\" " 2>&1 )
  rc2=$?
  if [ "${rc1}" == "0" -o "${rc2}" == "0" ]; then
	result="OK, [${type1}] return [${rc1}]; [${type2}] return [${rc2}]"
	rc=${STATE_OK}
  else
	result="CRIT, [${type1}] return [${rc1}]; [${type2}] return [${rc2}]" 
	rc=${STATE_CRIT}
  fi
  echo -e "${result}"
  return "${rc}"
}





#
# Mail Body Begin ...
# 

# 0. set initial number
oknum=0 warnnum=0 critnum=0 totalnum=0


# 1. check config file by ARRAY_CONFIG_RULES
for((i=0;i<${#ARRAY_CONFIG_RULES[@]};i+=2))
do
	i2=$((${i}+1))
	cname="${ARRAY_CONFIG_RULES[$i]}"
	rule="${ARRAY_CONFIG_RULES[$i2]}"
	# rule="${rule/|/\|}" ; rule="${rule/$/\$}"
	# echo "pari: 1=[${cname}]  2=[${rule}]"; continue 1

	section=$(echo -e "${cname}" | awk -F"=>" '{print $1}')
	key=$(echo -e "${cname}" | awk -F"=>" '{print $2}')
	value=$(read_eminfo_config "${section}" "${key}")

	ornum=$(echo -e "${rule}" | awk -F" or " '{print NF}')
	if [ "${ornum}" == "1" ]; then
		type=$(echo -e "${rule}" | awk -F":" '{print $1}')
		result=$( eval "check_type_${type} \"${rule}\" \"${value}\" " 2>&1 )
		rc=$?
	elif [ "${ornum}" == "2" ]; then
		rule_1=$(echo -e "${rule}" | awk -F" or " '{print $1}')
		rule_2=$(echo -e "${rule}" | awk -F" or " '{print $2}')
		result=$( check_ortypes "${rule_1}" "${rule_2}" "${value}" 2>&1 )
		rc=$?
	fi
	case "${rc}" in
	"0") [ "${VERBOSE}" == "1" ] && echo -e "$(echo_green [OK])   : [${section}=>${key}] = [${value}]. details: ${result}"
	     ((oknum++))
	     ;;
	"1") echo -e "$(echo_yellow [WARN]) : [${section}=>${key}] = [${value}]. details: ${result}"
	     ((warnnum++))
  	     ;;
	"2") echo -e "$(echo_red [CRIT]) : [${section}=>${key}] = [${value}]. details: ${result}"
	     ((critnum++))
	     ;;
	esac
	((totalnum++))
done

# 2. check section name is blank or not ?
blankline=$( cat ${CONFIG_FILE} | awk '($0~/^[ \t]*\[[ \t]*.*[ \t]*\][ \t]*$/){print NR,$0}' | tr -d ' \t' | sed -e '/\[\]/!d;' | tr -d '[]' | tr '\n' ' ' )
if [ -z "${blankline//[ ]}" ]; then
	((oknum++))
	((totalnum++))
	[ "${VERBOSE}" == "1" ] && echo -e "$(echo_green [OK])   : [${CONFIG_FILE##*/}] NOT contains blank section"
else
	((critnum++))
	((totalnum++))
	echo -e "$(echo_red [CRIT]) : [${CONFIG_FILE##*/}] contains blank section in [${blankline}]"
fi

# 3. check section name contain blank or not ?
blankname=$( cat ${CONFIG_FILE} | awk '($0~/^[ \t]*\[[ \t]*.*[ \t]*\][ \t]*$/){print NR,$0}' | tr -d '[]' | awk '(NF>2){print $0}' )
if [ -z "${blankname//[ ]}" ]; then
	((oknum++))
	((totalnum++))
	[ "${VERBOSE}" == "1" ] && echo -e "$(echo_green [OK])   : [${CONFIG_FILE##*/}] each section NOT contains blank chars"
else
	((critnum++))
	((totalnum++))
	blankname=$(echo -e "${blankname}" | tr '\n' ';' )
	echo -e "$(echo_red [CRIT]) : line [ ${blankname} ], section contains blank chars"
fi

# 4. check config file contains duplicated section name or not ?
duplsection=$( cat ${CONFIG_FILE} | tr -d ' \t' | awk '($0~/^[ \t]*\[[ \t]*.*[ \t]*\][ \t]*$/){print NR,$0}'  | awk '{a[$2]++;} END{for(i in a){if(a[i]>1){print a[i],i}}}'  )
if [ -z "${duplsection//[ ]}" ]; then
	((oknum++))
	((totalnum++))
	[ "${VERBOSE}" == "1" ] && echo -e "$(echo_green [OK])   : [${CONFIG_FILE##*/}] NOT contains duplicated section"
else
	((critnum++))
	((totalnum++))
	duplsection=$(echo -e "${duplsection}" | awk '{printf "%s duplicated section: %s, ",$1,$2}')
	echo -e "$(echo_red [CRIT]) : [${CONFIG_FILE##*/}] contains duplicated section [${duplsection}]"
fi

# 5. check if exists duplicated key name under one same section or not ?
for section in `list_all_section`
do
	duplkey=$( list_section_keys  "${section}" | awk '{a[$1]++} END{for(i in a){if(a[i]>1){print a[i],i}}}' )
	if [ -z "${duplkey//[ ]}" ]; then
		((oknum++))
		((totalnum++))
		[ "${VERBOSE}" == "1" ] && echo -e "$(echo_green [OK])   : [${section}] NOT contains duplicated key"
	else
		((critnum++))
		((totalnum++))
		duplkey=$(echo -e "${duplkey}" | awk '{printf "%s duplicated keys: %s, ",$1,$2}')
		echo -e "$(echo_red [CRIT]) : [${section}] contains duplicated key [${duplkey}]"
	fi
done

# print result
echo "Result: [succ=${oknum}/${totalnum} warn=${warnnum}/${totalnum} crit=${critnum}/${totalnum}]"


# exit
if [ "${critnum}" != "0" ]; then
	exit ${STATE_CRIT}
elif [ "${warnnum}" != "0" ]; then
	exit ${STATE_WARN}
elif [ "${oknum}" == "${totalnum}" ]; then
	exit ${STATE_OK}
else
	exit ${STATE_UNKN}
fi
