#!/bin/bash

#
# This Script Responsible for Initialize Setting 
# 
# Running if eminfo_id is empty.
#
# Return Code: 0|1
# 

[ -z "${BASE_DIR}" ] && {
        path=$(cd $(dirname $0) && pwd)
        BASE_DIR=${path%/*}
        source ${BASE_DIR}/bin/include 2>&-
}


[ -f "/usr/bin/cksum" -a -x "/usr/bin/cksum" ] || {
	echo "/usr/bin/cksum not prepared"
	exit 1
}
[ -f "/sbin/blkid" -a -x "/sbin/blkid" ] || {
	echo "/sbin/blkid not prepared" 
	exit 1
}
[ -f "/usr/bin/uuidgen" -a -x "/usr/bin/uuidgen" ] || {
	echo "/usr/bin/uuidgen not prepared"
	exit 1
}

# mode = rpminit
mode="$1"



### Data Preparation...

# try to search basic_domain
v5_config="/usr/local/eyou/mail/etc/eyou_mail.ini"
v4_config="/var/eyou/etc/eyou_smtpd_config"
gw_config="/var/emdg/etc/domain.conf"
if [ -f "${v5_config}" -a -s "${v5_config}" ]; then
	base_domain=$(awk -F"=" '($1~/server_me\>/) {$1="";print;exit;}' "${v5_config}" 2>&- | tr -d '[" \t]')
elif [ -f "${v4_config}" -a -s "${v4_config}" ]; then
	base_domain=$(awk '($1~/o_value\>/) {$1="";print;exit;}' "${v4_config}" 2>&- | tr -d '[ \t]')
elif [ -f "${gw_config}" -a -s "${gw_config}" ]; then
	base_domain=$(awk '{print $1;exit}' "${gw_config}" 2>&- | tr -d '[ \t]')
fi  
base_domain="${base_domain//[ ]}"

# try to search disk uuid
disk_uuid=$(/sbin/blkid -s UUID -o value 2>&-|tr -d '\r\n')
[ -z "${disk_uuid//[ ]}" ] && {
	disk_uuid=$(/sbin/blkid -s UUID  2>&-|awk -F"=" '{print $2}'|tr -d '"'|tr -d '\r\n')
}
disk_uuid="${disk_uuid//[ ]}"

# try to search imac uuid
imac_uuid=$(/usr/bin/uuidgen -t 2>&-|tr -d '\r\n')
imac_uuid="${imac_uuid##*-}"
imac_uuid="${imac_uuid//[ ]}"

# try to search kernel uuid  (random, not recommanded)
kern_uuid=$(cat /proc/sys/kernel/random/uuid 2>&-|tr -d '\r\n')
kern_uuid="${kern_uuid//[ ]}"

# read eminfo global id
eminfo_id=$(read_eminfo_config global id)

# read eminfo global name
eminfo_name=$(read_eminfo_config global name)

# read default mail_receviers
mail_receviers=$(read_eminfo_config plugin_default mail_receviers)


### Main Body Begin...

if [ "${mode}" == "rpminit" ]; then
# set eminfo_id
if [ -z "${eminfo_id//[ ]}" ]; then
	if [ ! -z "${disk_uuid//[ ]}" ]; then
		setby="disk_uuid: ${disk_uuid}"
		eminfo_id=$(echo -n "${disk_uuid}"|/usr/bin/cksum|awk '{print $1}'|tr -d '\r\n')
	elif [ ! -z "${imac_uuid//[ ]}" ]; then
		setby="imac_uuid: ${imac_uuid}"
		eminfo_id=$(echo -n "${imac_uuid}"|/usr/bin/cksum|awk '{print $1}'|tr -d '\r\n')
	elif [ ! -z "${kern_uuid//[ ]}" ]; then
		setby="kern_uuid: ${kern_uuid}"
		eminfo_id=$(echo -n "${kern_uuid}"|/usr/bin/cksum|awk '{print $1}'|tr -d '\r\n')
	fi
	echo -en "initializing eminfo id ..."; echo
	echo -en "set eminfo_id as [$(echo_green "${eminfo_id}")] ... "
	write_log -f "${EMINFO_LOG}" "SETINITX eminfo_id=[${eminfo_id}] setby=[${setby}]"
	update_eminfo_config global id "${eminfo_id}"
	rc=$?
	case "${rc}" in
	"0")	echo_green "[OK]";echo					;;
	"2")	echo_yellow "[SKIP]";echo				;;
	"5")	add_eminfo_config global id "${eminfo_id}"
		rc=$?
		case "${rc}" in
		"0") echo_green "[OK]"; echo				;;
		"2") echo_yellow "[SKIP]";echo				;;
		*)   echo_red "[FAIL]"; echo				;;
		esac
		;;
	*)	echo_red "[FAIL]";echo					;;
	esac
else
	echo -en "eminfo_id already set: [$(echo_green "${eminfo_id}")]";echo
fi

else
# set eminfo_name
if [ -z "${eminfo_name//[ ]}" -o "${eminfo_name//[ ]}" == "eminfo_ops.eyou.net" ]; then
  	echo -en "\n\nExample: mysql-master web mta ldap memcache\n\n"
	valid=0
	while [ "${valid}" == "0" ]
	do
		read -p "role name of this server: " input_role
		if [ -z "${input_role//[ ]}" ]; then
			valid=0
			continue
		else
			valid=1
		fi
	done
	valid=0
	while [ "${valid}" == "0" ]
	do
		if [ -z "${base_domain}" ]; then
			read -p "base domain of this server: " input_domain
		else
			read -p "base domain of this server [${base_domain}]: " input_domain
			[ -z "${input_domain//[ ]}" ] && input_domain="${base_domain}" 
		fi
		if [ -z "${input_domain//[ ]}" ]; then
			valid=0
			continue
		else
			valid=1
		fi
	done
	eminfo_name="${input_role}_${input_domain}"
	echo -en "set eminfo_name as [$(echo_green "${eminfo_name}")] ... "
	write_log -f "${EMINFO_LOG}" "SETINITX eminfo_name=[${eminfo_name}]"
	update_eminfo_config global name "${eminfo_name}"
	rc=$?
	case "${rc}" in
	"0")    echo_green "[OK]";echo                                  ;;
	"2")    echo_yellow "[SKIP]";echo                               ;;
	"5")    add_eminfo_config global name "${eminfo_name}"
		rc=$?
		case "${rc}" in
		"0") echo_green "[OK]"; echo                            ;;
		"2") echo_yellow "[SKIP]";echo                          ;;
		*)   echo_red "[FAIL]"; echo                            ;;
		esac
		;;
	*)      echo_red "[FAIL]";echo                                  ;;
	esac
else
	echo -en "eminfo_name already set: [$(echo_green "${eminfo_name}")]";echo
fi

# set mail_receviers
if [ -z "${mail_receviers//[ ]}" -o "${mail_receviers//[ ]}" == "root_bbk@126.com" ]; then
	echo -en "\n\nExample: abc@126.com  test@test.net \n\n"
	valid=0
	while [ "${valid}" == "0" ]
	do
		read -p "default mail receviers of this server: " input_mail_receviers
		if [ -z "${input_mail_receviers//[ ]}" ]; then
			valid=0
			continue
		fi
		invalid_email=
		for m in `echo "${input_mail_receviers}"`
		do
			if [ "$(echo -e "${m}"|grep -E -o "\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*")" == "" ]; then
				invalid_email="${invalid_email} ${m}"
			fi
		done
		if [ ! -z "${invalid_email//[ ]}" ]; then
			echo -en "$(echo_red "[${invalid_email}]") : not valid email address.";echo
		else
			valid=1
		fi
	done
	mail_receviers="${input_mail_receviers}"
	echo -en "set default mail_receviers as [$(echo_green "${mail_receviers}")] ... "
	write_log -f "${EMINFO_LOG}" "SETINITX default_mail_receviers=[${mail_receviers}]"
	update_eminfo_config plugin_default mail_receviers "${mail_receviers}"
        rc=$?
        case "${rc}" in
        "0")    echo_green "[OK]";echo                                  ;;
        "2")    echo_yellow "[SKIP]";echo                               ;;
        "5")    add_eminfo_config plugin_default mail_receviers "${mail_receviers}"
                rc=$?
                case "${rc}" in
                "0") echo_green "[OK]"; echo                            ;;
                "2") echo_yellow "[SKIP]";echo                          ;;
                *)   echo_red "[FAIL]"; echo                            ;;
                esac
                ;;  
        *)      echo_red "[FAIL]";echo                                  ;;
        esac
	
else
	echo -en "default mail_receviers already set: [$(echo_green "${mail_receviers}")]";echo
fi

fi
# END
