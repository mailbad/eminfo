#!/bin/bash

#
# This Script Responsible for Previous Checking
# Running at the start of eminfo
#
# Return Code: 0|1
# 

BASE_DIR="/usr/local/eminfo"
if [ -f ${BASE_DIR}/bin/include -a -s ${BASE_DIR}/bin/include ]; then
        source ${BASE_DIR}/bin/include 2>&1
        rc=$?
        [ "$rc" != "0" ] && {
                echo "load include file failed with status $rc"
                exit 1
        }
else
        echo "${BASE_DIR}/bin/include not exist or empty. exit" 
        exit 1
fi


export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"

# Return Codes
STATE_OK=0
STATE_CRITICAL=1

# Global Var: ok_num crit_num
ok_num=0
crit_num=0


check_arch() {
  local arch=$(/bin/uname 2>&- | tr '[A-Z]' '[a-z]')
  if [ "${arch}" != "linux" ]; then
	echo -e "[$(echo_red "WARN")] : only platform linux allowed: [$(echo_yellow "arch=${arch}")]"
	((crit_num++))
	return 1
  else
	echo -e "[$(echo_green "OK")]   : platform linux is all right"
	((ok_num++))
	return 0
  fi
}


check_root_privi() {
  local idn=$(/usr/bin/id -u 2>&-)
  if [ "${idn}" != "0" ]; then
	echo -e "[$(echo_red "WARN")] : root privilege required: [$(echo_yellow "uid=${idn}")]"
	((crit_num++))
	return 1
  else
	echo -e "[$(echo_green "OK")]   : root privilege is available"
	((ok_num++))
	return 0
  fi
}

check_tmp() {
  if [ -d "/tmp" -a -r "/tmp" -a -w "/tmp" -a -x "/tmp" ]; then
	echo -e "[$(echo_green "OK")]   : directory /tmp is accessable"
	((ok_num++))
	return 0
  else
	echo -e "[$(echo_red "WARN")] : directory /tmp: [$(echo_yellow "is not accessable")]"
	((crit_num++))
	return 1
  fi
}


check_loadavg() {
  if [ -f /proc/loadavg -a -r /proc/loadavg ]; then
	local load=$(cut -d" " -f1 /proc/loadavg 2>&-)
	if [ -z "${load}" -o ! -z "${load//[0-9.]}" ]; then
		echo -e "[$(echo_red "WARN")] : first filed of /proc/loadavg invalid: [$(echo_yellow "${load}")]"
		((crit_num++))
		return 1
	else
		echo -e "[$(echo_green "OK")]   : first filed of /proc/loadavg: [${load}]"
		((ok_num++))
		return 0
	fi
  else
	echo -e "[$(echo_red "WARN")] : file /proc/loadavg not prepared: [$(echo_yellow "not file or not readable")]"
	((crit_num++))
	return 1
  fi
}

check_cmd() {
#
## !!! use "local" to annon an array, and then use "=" to define it.
##       do NOT use "local" to annon and define an array at once, as
##       sometimes it will be regarded as string like "(...)"
## wrong: local array_base_cmd=( ... )
## right: local array_base_cmd=(); array_base_cmd=( ... )
#
array_base_cmd=(
  "basic commands"
  /usr/bin/dirname
  /bin/basename
  /usr/bin/bc 
  /bin/sed
  /bin/awk
  /bin/gawk
  /bin/grep
  /usr/bin/column
  /bin/kill
  /bin/date
  /bin/cat
  /bin/ps
  /bin/mkdir
  /bin/mktemp
  /bin/cut
  /usr/bin/pstree
  /usr/bin/tr
  /usr/bin/tail
  /bin/echo
  /bin/uname
  /bin/ln
  /bin/unlink
  /usr/bin/readlink
  /usr/bin/stat
  /bin/touch
  /bin/rm
  /bin/tar
  /bin/gzip
  /bin/chmod
  /usr/bin/perl
  /usr/bin/od
  /usr/bin/tr
  /usr/bin/curl
  /usr/bin/find
  /usr/bin/du
  /usr/bin/nc
  /sbin/blkid
  /usr/bin/uuidgen
  /usr/bin/cksum
)

local num=0 lacklist=
for ((i=1;i<${#array_base_cmd[@]};i++))
do
	[ -f "${array_base_cmd[$i]}" -a -x "${array_base_cmd[$i]}" ] && {
		continue
	} || {
		((num++))
		lacklist="${lacklist} ${array_base_cmd[$i]}"
	}
done
if [ "${num}" != "0" ]; then
	echo -e "[$(echo_red "WARN")] : ${array_base_cmd[0]} [${num}/$((${#array_base_cmd[@]}-1))] not prepared: [$(echo_yellow "${lacklist}")]"
	((crit_num++))
	return 1
else
	echo -e "[$(echo_green "OK")]   : ${array_base_cmd[0]} [$((${#array_base_cmd[@]}-1))/$((${#array_base_cmd[@]}-1))] prepared"
	((ok_num++))
	return 0
fi

}


check_arch
#echo ok_num:${ok_num}:crit_num:${crit_num}
check_root_privi
#echo ok_num:${ok_num}:crit_num:${crit_num}
check_tmp
#echo ok_num:${ok_num}:crit_num:${crit_num}
check_loadavg
#echo ok_num:${ok_num}:crit_num:${crit_num}
check_cmd
#echo ok_num:${ok_num}:crit_num:${crit_num}

# echo "end:"
[ "${crit_num}" != "0" ] && {
	EXIT_STATUS=${STATE_CRITICAL}
} || {
	EXIT_STATUS=${STATE_OK}
}


echo -e "Result : [$(echo_red "${crit_num}") Error | $(echo_green "${ok_num}") OK]"
exit ${EXIT_STATUS}
