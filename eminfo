#!/usr/bin/env bash
#
# ================================================================================================
#
# Description	: pluginable platform written by perl/shell for linux ops.
# Config	: conf/eminfo.ini
# Pidfile	: /var/run/eminfo.pid
#
# Creation Date : 2012-01-15
#
# Author	: <zhangguangzheng@eyou.net> <zhang.elinks@gmail.com>
#
# HomePage	: https://github.com/sunshine0137/eminfo.git
# 
# Usage		: --help
#
# ================================================================================================


# === SET ${PATH}
#
export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"

# === SET ${BASE_DIR}   Defination is very important here, or this script won't
#                       get config file, function file and other related files.
#                       Now you would like to exec this scripts anywhere.
#
# BASE_DIR=$(cd "$(dirname "$0")" && pwd)
BASE_DIR="/usr/local/eminfo"

# === Turn Off Job Control
#
set +m

# === LOAD INCLUDE FILE
#
if [ -s ${BASE_DIR}/bin/include ]; then
	# eval | sh | bash | source | . ${BASE_DIR}/bin/include
  	source ${BASE_DIR}/bin/include  
else
  	echo "${BASE_DIR}/bin/include not exist or empty. exit" 
	exit 1
fi

# === PRE CHECK
# 
result=$( eval ${PRECHECK_SH} 2>&1 )
[ "$?" != "0" ] && {
  echo -e "\nPreCheck Result: Sorry, Current Enviroment is NOT Suitable to Run EMINFO \n" 
  echo -e "${result}"
  exit 1
}



############################################################################################
#
# VAR1=$(read_eminfo_config section1 key1)
# VAR2=$(read_eminfo_config section2 key2)
# VAR3=$(read_eminfo_config section3 key3)
# VAR4=$(read_eminfo_config section4 key4)
#
############################################################################################


### Help
##
show_help() {
cat << EOF

  $(echo_green "Options:")
	help				help stuff you are reading now.
  	version				print eminfo version.
	start   			start eminfo.
	stop    			stop eminfo.
	status				show eminfo status.
	precheck			precheck enviroment.
	checkconf    [-v|verbose]	check config file is all right or not.
	reload				reload include file (not config file) while eminfo is running.
	list         [plugin]		list specified plugin's scheduling status. on default will list all plugins.
	init	     [plugin]		reset plugin's scheduling time. argument [all] will reset all plugins.
	view         [plugin]		display [ config => value ] about plugin. argument [all] will display all plugins.
	report       [plugin]		report plugin's last running record. argument [all] will display all plugins.
	enable       [plugin]		enable plugin (change plugin's config item enable=yes)
	disable      [plugin]		disable plugin (change plugin's config item enable=no)
EOF
}

### Example
##
show_example() {
cat << EOF

  $(echo_green "Example:")
	./eminfo  help
	./eminfo  version
	./eminfo  precheck
	./eminfo  checkconf
	./eminfo  reload
	./eminfo  start | stop | status | list
        ./eminfo  list     check_pop_svr
	./eminfo  init     check_sysload | all
	./eminfo  view     check_v5_mysqlping | all
	./eminfo  report   check_port | all
	./eminfo  enable   check_sysload
	./eminfo  disable  check_sysload
EOF
}

### Tips
##
show_shorttips() {
cat << EOF

  $(echo_green "ShortTips:")
	precheck        => p 
	checkconf	=> c
	status          => s 
	reload          => r 
	list            => l            ( ln le lr li )
	init            => i 
	view            => v 
	report		=> R		( Re Rr Ri )
	enable		=> e
	disable		=> d

  $(echo_green "ShortTips Example:")
        ./eminfo  h
        ./eminfo  v
        ./eminfo  p 
        ./eminfo  c 
        ./eminfo  s 
        ./eminfo  r 
        ./eminfo  l  [ln|le|lr|li]
        ./eminfo  i  check_pop_svr | all | a
        ./eminfo  v  check_pop_svr | all | a
        ./eminfo  R  check_pop_svr | all | a 
        ./eminfo  e  check_pop_svr
        ./eminfo  d  check_pop_svr
EOF
}

### Show eminfo status
# Return Code:  0 1 2 3	   running | dead | dead with pid left | fake?
show_status() {
  if [ -f "${PID_FILE}" -a -s "${PID_FILE}" ]; then
	read pid < "${PID_FILE}"
	if [ -z "${pid//[0-9]}" -a -d "/proc/${pid}" ]; then    ###  numberic => running
		local cmdline=$(cat /proc/${pid}/cmdline 2>&-)
		[ "$(sub_str "${cmdline}" "eminfo")" == "yes" ] && {    ### cmdline contains "eminfo" ==> eminfo running
			echo_green "eminfo (pid: ${pid}) running ..." ; echo
			return 0
		} || {
			echo_yellow "eminfo (pid: ${pid}) running ... but seems fake?  [CMD: "${cmdline}"]" ; echo  ### fake?
			return 3
 		}
	else
		echo_yellow "eminfo dead, but pid file: ${PID_FILE} left dead." ; echo  ### not numberic ==> dead and pidfile left
		return 2
	fi
  else
  	echo_yellow "eminfo dead." ; echo  ### PID_FILE not exists ==> dead
	return 1
  fi
}

### Start eminfo
##
start_core_cron() {

if [ -e "${PID_FILE}" ]; then   ## exit while pid file exist
	echo_yellow pid file: ${PID_FILE} already exist. && echo && show_status
	return 1
else
	write_log -f "${EMINFO_LOG}" S0000000 EMINFO starting ...

	# === CHECK CONFIG FILE
	result=$( eval ${CHECKCONF_SH} 2>&1 )
	rc=$?
	if [ "$rc" != "0" ]; then
		write_log -f "${EMINFO_LOG}" S0000000 EMINFO script checkconf return failed[rc=${rc}]. exit
  		echo -e "\nCheck Config Result: Sorry, Config File Contains Some Mistakes \n"
  		echo -e "${result}"
  		exit 1
	else
		write_log -f "${EMINFO_LOG}" S0000000 EMINFO script checkconf return succeed[rc=${rc}]. continue... 
	fi

	# === Execute Inner Plugins
	for plugin_name in `list_inner_plugin_section`
	do
		write_log -f "${EMINFO_LOG}" S0000000 EMINFO executing inner plugins [${plugin_name}] ...
		process_inner_plugin "${plugin_name}"
	done
	write_log -f "${EMINFO_LOG}" S0000000 EMINFO inner plugins execution done. details in "${INNER_LOG##*/}".
	
	{ while : ; do
		
		### trap signal HUP to reload bin/include
		trap '  write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::Caught:::SIGHUP, Reloading..."
			source ${BASE_DIR}/bin/include 1>/dev/null 2>&1
			[ $? == "0" ] && {
				write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::RELOADED"
			} || {
				write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::RELOAD-FAILD"
			}
	   	' 1

		### trap signal TERM to clean up and exit
		trap '  write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::Caught:::SIGTERM, Shuting Down..." 
			list_running_plugin_section | while read rp
			do
				write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO try to stop running plugin: [${rp}]"
				stop_single_plugin "${rp}"
				clear_dead_lock_pid "${rp}"			
			done
			rm -f "${PID_FILE}" 1>&- 2>&-
			write_log -f "${EMINFO_LOG}" "TRAP0000 EMINFO Main:::EXIT"
			exit 1
		' 15

		### Important !!!  
		### [wait] can NOT be placed in  "list|while ... done"  struct  !!!
		### as wait will lead to eminfo haning up.
		# clear_dead_lock_pid
		# wait 

		list_enabled_plugin_section | while read plugin_name
		do
			clear_dead_lock_pid "${plugin_name}"
			if [ "$(time2run_ornot "${plugin_name}")" == "yes" ]; then
				if [ ! -s "${RUN_DIR}/${plugin_name}.pid" ]; then
					add_runlock_on_pid_notexist ${plugin_name}
					[ "$?" == "0" ] && {
						if [ -z "$( echo "${plugin_name}" | grep -E -o "^eminfo_" )" ]; then
							process_plugin ${plugin_name} &
							_pid=$!
							echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						else
							process_inner_plugin ${plugin_name} &
							_pid=$!
							echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						fi
					}
				else
					check_runlock_on_pid_exist ${plugin_name}
					[ "$?" == "4" ] && {
						if [ -z "$( echo "${plugin_name}" | grep -E -o "^eminfo_" )" ]; then
                                                        process_plugin ${plugin_name} &
							_pid=$!
                                                        echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						else
                                                        process_inner_plugin ${plugin_name} &
							_pid=$!
                                                        echo "${_pid}" > "${RUN_DIR}/${plugin_name}.pid"
						fi
					}
				fi
			fi
		done

		### sleep for a while.
		INTERVAL=$( read_eminfo_config global scan_interval )
		[ -z "${INTERVAL}" -o ! -z "${INTERVAL//[0-9]}" ] && {
			INTERVAL=5
		} || {
			[ "$(echo "${INTERVAL}<5"|bc 2>&-)" -eq 1 ] && INTERVAL=5
		}
		sleep ${INTERVAL}

	done 
	} >> "${EMINFO_LOG}" 2>&1  &   ### running as daemon

	### save daemon pid
	echo $! > ${PID_FILE}
fi 

}


### Stop eminfo
##
stop_core_cron() {
  local status=  rps=

  echo_green trying to stop eminfo...
  status=$( show_status 2>&1 )
  if [ "$?" == "0" ]; then   ### is running    status: fake? is dangerous ==> SKIP
  	write_log -f "${EMINFO_LOG}" S0000000 EMINFO stopping...

		# 1. first stop core cron
		write_log -f "${EMINFO_LOG}" S0000000 1 "=>" stop eminfo core cron.
		stopps_by_pidfile ${PID_FILE}

		# 2. then stop all running plugins
		rps="$(list_running_plugin_section | tr '\n' ' ')"
		write_log -f "${EMINFO_LOG}" S0000000 2 "=>" stop all of running plugins: "[${rps}]"
		for p in `echo "${rps}"`
  		do
			stop_single_plugin "${p}"
			clear_dead_lock_pid "${p}"
  		done

	echo_green "  [OK]"; echo
	write_log -f "${EMINFO_LOG}" S0000000 3 "=>" stop eminfo done.
  else
	echo_red "  [SKIP]" ; echo
	echo "${status}"
  fi
}


### Send single HUP to reload bin/include.
##
reload_core_cron(){
  local status= pid=
  echo_green trying to reload eminfo include file: bin/include ...
  status=$( show_status 2>&1 )
  if [ "$?" == "0" ]; then   ### eminfo is running      status: fake? is DANGEROUS ! ==> SKIP
  	read pid < "${PID_FILE}"
	write_log -f "${EMINFO_LOG}" R0000000 EMINFO Deamon is Running, PID: [${pid}].
	write_log -f "${EMINFO_LOG}" R0000000 EMINFO Reloading Include File, Sending Signal 1 to EMINFO Daemon: [${pid}].
	kill -1 "${pid}" 2>&-   ### send signal 1 to eminfo daemon.
	echo_green "  [OK]"; echo
	return 0
  else
	echo_red  "  [SKIP]"; echo 
	echo "${status}"
  fi
}

### List all plugin status
##
list_core_cron() {
  clear_dead_lock_pid
  list_plugin_status all
}




###################################  Main Body ####################################
### Process Input Arguments
#echo $#
#echo $*
case "$#" in 
"1")
	case "$1" in
	"help"|"h")
		show_help		
		show_example			;;
	"version"|"v")
		echo "${EMINFO_VERSION}"	;;
	"start")
		start_core_cron			;;
	"stop")
		stop_core_cron 			;;
	"status"|"s")
		show_status			;;
	"list"|"l")
		show_status
		list_core_cron			;;
	"ln")
		list_plugin_section | tr ' ' '\n'
						;;
	"le")
		list_plugin_status $(list_enabled_plugin_section)
						;;
	"lr")
		list_plugin_status $(list_running_plugin_section)
						;;
	"li")
		list_plugin_status $(list_inner_plugin_section)
						;;
	"Re")
		for s in `list_enabled_plugin_section`
		do
			. ${REPORT_SH} "${s}"
		done
						;;
	"Rr")
		for s in `list_running_plugin_section`
		do
			. ${REPORT_SH} "${s}"
		done
						;;
	"Ri")
		for s in `list_inner_plugin_section`
		do
			. ${REPORT_SH} "${s}"
		done
						;;
	"precheck"|"p")
		. ${PRECHECK_SH}		;;
	"checkconf"|"c")
		. ${CHECKCONF_SH}		;;
	"reload"|"r")
		reload_core_cron		;;
	"?"|"/?")
		show_help
		show_example
		show_shorttips			;;
	*)
		show_help
		show_example			;;
	esac
	;;

"2")
	[ -z "${2//[ ]}" ] && {
		echo_yellow "second argument [${2}] is null.";echo
		exit 1
	}

	case "$1" in
	"?")
		show_shorttips		;;
	"list"|"l")
		if [ "$(read_eminfo_section "$2")" == "$2" ]; then
			list_plugin_status  "$2"
		else
			echo plugin  $(echo_yellow "[$2]") : not registered in config file.
		fi
			;;	
	"enable"|"e")
		if [ "$(read_eminfo_section "$2")" == "$2" ]; then
                        enable_plugin  "$2"
			case "$?" in
			"0")  echo "enable [$2] success [$(echo_green OK)]"				;;
			"2")  echo "enable [$2] skip [$(echo_yellow NoNeed: already enabled)]"		;;
			"5")  echo "enable [$2] skip [$(echo_yellow NoConf: config name [enable] not found)]"	;;
			*)    echo "enable [$2] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}" 	;;
			esac
		else
                        echo plugin  $(echo_yellow "[$2]") : not registered in config file.
                fi
			;;
	"disable"|"d")
		if [ "$(read_eminfo_section "$2")" == "$2" ]; then
                        disable_plugin  "$2"
			case "$?" in
                        "0")  echo "disable [$2] success [$(echo_green OK)]"                                ;;
                        "2")  echo "disable [$2] skip [$(echo_yellow NoNeed: already disabled)]"            ;;
                        "5")  echo "disable [$2] skip [$(echo_yellow NoConf: config name [enable] not found)]"       ;;
                        *)    echo "disable [$2] failed [$(echo_red FAIL)], details in ${EMINFO_LOG}"       ;;
                        esac
		else
                        echo plugin  $(echo_yellow "[$2]") : not registered in config file.
                fi
			;;
	"init"|"i")
		if [ "$(read_eminfo_section "$2")" == "$2" ]; then
                        init_plugin  "$2"
		elif [ "$2" == "all" -o "$2" == "a" ]; then
			init_plugin
		else
                        echo plugin  $(echo_yellow "[$2]") : not registered in config file.
                fi
			;;
	"view"|"v")
		if [ "$(read_eminfo_section "$2")" == "$2" ]; then
                        view_base_config "$2"
			view_extra_config "$2"
		elif [ "$2" == "all" -o "$2" == "a" ]; then
			for p in `list_plugin_section`
			do
				view_base_config  "${p}"
				view_extra_config "${p}"
				echo;echo;
			done
		else
                        echo plugin $(echo_yellow "[$2]") : not registered in config file.
		fi
			;;
	"report"|"R")
		if [ "$(read_eminfo_section "$2")" == "$2" ]; then
			. ${REPORT_SH} "$2"
		elif [ "$2" == "all" -o "$2" == "a" ]; then
			. ${REPORT_SH} "all"
		else
			echo plugin $(echo_yellow "[$2]") : not registered in config file.
		fi
			;;
	"checkconf"|"c")
		if [ "$2" == "verbose" -o "$2" == "-v" ]; then
			. ${CHECKCONF_SH} "$2"
		fi
			;;
	*)
		show_help
		show_example		;;
	esac
	;;

*)
	show_help
	show_example
	;;
esac
